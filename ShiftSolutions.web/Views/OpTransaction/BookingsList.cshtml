@model IEnumerable<ShiftSolutions.web.Models.Booking>
@* debug only *@
@if (Model == null)
{
    <div class="alert alert-danger">Model is NULL</div>
}
else if (!Model.Any())
{
    <div class="alert alert-warning">No bookings found.</div>
}
else
{
    <div class="alert alert-info">Loaded @Model.Count() bookings.</div>
}


<div class="pageTitleBox  d-sm-flex align-items-center justify-content-between">
    <h4>Orders / Bookings</h4>
    <p>Staff <span>></span> <span>Orders / Bookings</span></p>
</div>



<div class="p-4 mb-4">
    <div class="DashboardTableContainerE ">
        <!-- FILTERS -->
        <div class="DTFilters">
            <div class="DTFilterRow">
                <div class="DTField">
                    <label>Search</label>
                    <input type="text" id="obSearch" placeholder="Order ID, merchant, apartment, customer…" />
                </div>

                <div class="DTField">
                    <label>Type</label>
                    <select id="obType">
                        <option value="">All</option>
                        <option>Order</option>
                        <option>Booking</option>
                    </select>
                </div>

                <div class="DTField">
                    <label>Status</label>
                    <select id="obStatus">
                        <option value="">All</option>
                        <option>Paid</option>
                        <option>Pending</option>
                        <option>Cancelled</option>
                        <option>Refunded</option>
                        <option>Failed</option>
                    </select>
                </div>

                <div class="DTField">
                    <label>From</label>
                    <input type="date" id="obFrom" />
                </div>

                <div class="DTField">
                    <label>To</label>
                    <input type="date" id="obTo" />
                </div>

                <div class="DTButtons">
                    <button type="button" id="obApply" class="btn btn-primary">Apply</button>
                    <button type="button" id="obReset" class="btn btn-light">Reset</button>
                    <button type="button" id="obExport" class="btn btn-soft-info">Export Excel</button>
                </div>
            </div>
        </div>

        <div class="table-responsive mt-3">
            <table class="table table-bordered table-striped align-middle">
                <thead class="table-light">
                    <tr>
                        <th>Id</th>
                        <th>Booking Id</th>
                        <th>Booking Date</th>
                        <th>Client Name</th>
                        <th>Client Email</th>
                        <th>Apartment Id</th>
                        <th>Apartment Name</th>
                        <th>Apartment Address</th>
                        <th>Description</th>
                        <th>City</th>
                        <th>Price/Night</th>
                        <th>Star Ratings</th>
                        <th>Stay Duration</th>
                        <th>Transaction Id</th>
                        <th>Total Amount</th>
                        <th>No. of Nights</th>
                        <th>Payment Method</th>
                        <th>Transaction Ref</th>
                        <th>Payment Status</th>
                        <th>VAT %</th>
                        <th>VAT</th>
                        <th>SubTotal</th>
                        <th>Created At</th>
                        <th>Updated At</th>
                        <th>Active</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var b in Model)
                    {
                        <tr class="DTClickable" data-href="@Url.Action("OrderDetails", "OpTransaction", new { id = b.Id })">
                            <td>@b.Id</td>
                            <td>@b.BookingId</td>
                            <td>@b.BookingDate.ToString("yyyy-MM-dd")</td>
                            <td>@b.ClientName</td>
                            <td>@b.ClientEmailAddress</td>
                            <td>@b.ApartmentId</td>
                            <td>@b.ApartmentName</td>
                            <td>@b.ApartmentAddress</td>
                            <td>@b.ApartmentDescription</td>
                            <td>@b.ApartmentCity</td>
                            <td>@b.ApartmentPricePerNight</td>
                            <td>@b.ApartmentStarRatings</td>
                            <td>@b.ApartmentStayDuration</td>
                            <td>@b.TransactionId</td>
                            <td>@b.TotalAmount</td>
                            <td>@b.NumberOfNights</td>
                            <td>@b.PaymentMethod</td>
                            <td>@b.TransactionReferenceId</td>
                            <td>@b.PaymentStatus</td>
                            <td>@b.VatPercentage</td>
                            <td>@b.Vat</td>
                            <td>@b.SubTotal</td>
                            <td>@b.CreatedAt</td>
                            <td>@b.UpdatedAt?.ToString("yyyy-MM-dd")</td>
                            <td>@(b.IsActive ? "Yes" : "No")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        
    </div>

</div>


<div class="Footer flex justify-center">
    <p>
        <script>document.write(new Date().getFullYear())</script>
        &copy; Ajebo
    </p>


</div>



<!--Styles-->

<style>
    /* ---------- container & header ---------- */
    .DashboardTableContainerE {
        margin-top: 12px; 
        height: 700px;
    }

    .DTH {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 8px 4px 10px;
    }

        .DTH h5 {
            margin: 0;
            font-weight: 600;
            color: #0f172a;
        }

    /* ---------- filter bar ---------- */
    .DTFilters {
        padding: 12px 16px;
        background: #fff;
        border: 1px solid #e9edf4;
        border-radius: 10px;
        margin-bottom: 12px;
    }

    .DTFilterRow {
        display: flex;
        flex-wrap: wrap;
        gap: 12px;
        align-items: flex-end;
    }

    .DTField {
        display: flex;
        flex-direction: column;
        min-width: 190px;
    }

        .DTField label {
            font-size: 12px;
            color: #667085;
            margin-bottom: 6px;
        }

        .DTField input, .DTField select {
            height: 36px;
            border: 1px solid #d0d5dd;
            border-radius: 8px;
            padding: 0 10px;
            font-size: 14px;
        }

    .DTButtons {
        margin-left: auto;
        display: flex;
        gap: 8px;
    }

    .btn {
        height: 36px;
        border-radius: 8px;
        padding: 0 14px;
        font-weight: 600;
        font-size: 14px;
        cursor: pointer;
    }

    .btn-primary {
        background: #4f46e5;
        color: #fff;
        border: 1px solid #4f46e5;
    }

    .btn-light {
        background: #fff;
        color: #344054;
        border: 1px solid #d0d5dd;
    }

    .btn-soft-info {
        background: #e6f2ff;
        color: #1d4ed8;
        border: 1px solid #cfe4ff;
    }

    /* ---------- table ---------- */
    .DTTableWrap {
        background: #fff;
        border: 1px solid #e9edf4;
        border-radius: 10px;
        overflow: auto;
        height: 550px;
    }

    .DTTable {
        border-collapse: separate;
        border-spacing: 0;
        width: 100%;
    }

        .DTTable th, .DTTable td {
            padding: 12px 14px;
            white-space: nowrap;
        }

        .DTTable thead tr {
            background: #f8fafc;
            color: #667085;
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: .02em;
        }

        .DTTable tbody tr {
            border-top: 1px solid #f1f4f9;
            cursor: pointer;
        }

            .DTTable tbody tr:hover {
                background: #f9fbff;
            }

    .muted {
        color: #64748b;
    }

    /* ---------- compact price cell ---------- */
    .PCell {
        min-width: 240px;
    }

    .PLine {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 16px;
        line-height: 1.15;
        margin: 2px 0;
    }

    .PLabel {
        color: #64748b;
        font-size: 13px;
    }

    .PValue {
        color: #0f172a;
        font-size: 14px;
    }

        .PValue.strong {
            font-weight: 700;
        }

        .PValue.green {
            color: #117B34;
            font-weight: 600;
        }

        .PValue.amber {
            color: #B45309;
            font-weight: 600;
        }

    .dot {
        display: inline-block;
        width: 8px;
        height: 8px;
        border-radius: 999px;
        vertical-align: middle;
    }

    .dot-green {
        background: #10b981;
    }

    /* ---------- chips ---------- */
    .chip {
        padding: 2px 8px;
        border-radius: 999px;
        font-size: 12px;
        font-weight: 700;
    }

    .chip-paid {
        background: #E6F4FF;
        color: #1D4ED8;
    }

    .chip-pending {
        background: #FFF4E5;
        color: #B45309;
    }

    .chip-refunded {
        background: #FEE2E2;
        color: #B91C1C;
    }

    /* ---------- actions dropdown ---------- */
    .DTActionCol {
        width: 1%;
    }

    .icon-dot {
        width: 28px;
        height: 28px;
        border-radius: 6px;
        border: 1px solid #e5e7eb;
        background: #fff;
        line-height: 24px;
        font-size: 18px;
        cursor: pointer;
    }

    .manual-dropdown {
        position: relative;
        display: inline-block
    }

        .manual-dropdown .dd-menu {
            position: absolute;
            right: 0;
            top: 110%;
            min-width: 9rem;
            background: #fff;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            box-shadow: 0 10px 20px rgba(0,0,0,.08);
            display: none;
            z-index: 50
        }

            .manual-dropdown .dd-menu.show {
                display: block
            }

        .manual-dropdown .dd-item {
            display: block;
            padding: .5rem .75rem;
            color: #334155;
            text-decoration: none;
            width: 100%;
            text-align: left;
            background: #fff;
            border: 0
        }

            .manual-dropdown .dd-item:hover {
                background: #f8fafc
            }
</style>



<!--Javascript codes--> 
<script>
    // Row click → navigate to details (ignore clicks from action cell)
    document.addEventListener('click', (e) => {
        const row = e.target.closest('tr.DTClickable');
        if (row && !e.target.closest('.DTActionCol')) {
            const href = row.getAttribute('data-href');
            if (href) window.location.href = href;
        }
    });

    // Dropdown open/close
    (function () {
        function closeAll(except) {
            document.querySelectorAll('.manual-dropdown .dd-menu.show').forEach(m => {
                if (!except || m !== except) { m.classList.remove('show'); }
            });
        }
        document.addEventListener('click', (e) => {
            const btn = e.target.closest('[data-dd-button], .icon-dot');
            if (btn) {
                const wrap = btn.closest('.manual-dropdown');
                const menu = wrap.querySelector('.dd-menu');
                const open = menu.classList.contains('show');
                closeAll();
                if (!open) { menu.classList.add('show'); }
                e.stopPropagation();
            } else if (!e.target.closest('.manual-dropdown')) {
                closeAll();
            }
        });
        document.addEventListener('keydown', e => e.key === 'Escape' && closeAll());
    })();

    // Filter hooks (wire to backend later)
    document.getElementById('obApply').addEventListener('click', () => {
        const q = document.getElementById('obSearch').value.trim();
        const type = document.getElementById('obType').value;
        const status = document.getElementById('obStatus').value;
        const from = document.getElementById('obFrom').value;
        const to = document.getElementById('obTo').value;
        console.log('Apply OB filters', { q, type, status, from, to });
        // TODO: fetch with these params and rebuild tbody
    });
    document.getElementById('obReset').addEventListener('click', () => {
        ['obSearch', 'obType', 'obStatus', 'obFrom', 'obTo'].forEach(id => document.getElementById(id).value = '');
        // TODO: reload default dataset
    });
    document.getElementById('obExport').addEventListener('click', () => {
      window.location.href = '@Url.Action("ExportExcel", "OpTransaction")';
    });
</script>















