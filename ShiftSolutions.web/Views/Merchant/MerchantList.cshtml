<div class="pageTitleBox d-sm-flex align-items-center justify-content-between">
    <h4>All Merchants</h4>
    <p>Merchants <span>›</span> All Merchants</p>
</div>

<div class="p-4">
    <div class="DashboardTableContainerE" id="merchantList">
        <!-- Header + actions -->
        <div class="DTH">
            <div class="flex items-center gap-2">
                <h5 class="mb-0">All Merchants</h5>
                <span class="chip"><strong id="mcCount">0</strong>&nbsp;total</span>
            </div>
            <div class="flex gap-2">
                <button class="btn btn-soft-info" id="mcExport">Export CSV</button>
                <button class="btn btn-primary">New Merchant</button>
            </div>
        </div>

        <!-- Filters -->
        <div class="DTFilters">
            <div class="DTFilterRow">
                <div class="DTField">
                    <label>Search</label>
                    <input id="mcQ" placeholder="Name, email, phone…">
                </div>
                <div class="DTField">
                    <label>Status</label>
                    <select id="mcStatus">
                        <option value="">All</option>
                        <option value="Approved">Approved</option>
                        <option value="Pending">Pending</option>
                        <option value="Declined">Declined</option>
                    </select>
                </div>
                <div class="DTField">
                    <label>City</label>
                    <input id="mcCity" placeholder="e.g., Lagos">
                </div>
                <div class="DTField">
                    <label>From</label>
                    <input type="date" id="mcFrom">
                </div>
                <div class="DTField">
                    <label>To</label>
                    <input type="date" id="mcTo">
                </div>

                <div class="DTButtons">
                    <button class="btn btn-primary" id="mcApply">Apply</button>
                    <button class="btn btn-light" id="mcReset">Reset</button>
                </div>
            </div>

            <!-- Sort row -->
            <div class="DTFilterRow" style="grid-template-columns:repeat(6,minmax(0,1fr))">
                <div class="DTField">
                    <label>Sort by</label>
                    <select id="mcSort">
                        <option value="status-desc">Status: Approved → Others</option>
                        <option value="status-asc">Status: Others → Approved</option>
                        <option value="name-asc">Name A → Z</option>
                        <option value="name-desc">Name Z → A</option>
                        <option value="created-desc">Created: Newest</option>
                        <option value="created-asc">Created: Oldest</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- Table -->
        <div class="DTTableWrap">
            <table class="DTTable w-full">
                <thead>
                    <tr class="DTHMain">
                        <th>Merchant</th>
                        <th>Contact</th>
                        <th>City</th>
                        <th>Apartments</th>
                        <th>Status</th>
                        <th>Created</th>
                        <th class="DTActionCol">Actions</th>
                    </tr>
                </thead>
                <tbody id="mcBody"></tbody>
            </table>
        </div>

        <!-- Simple pagination (client-side) -->
        <div class="mc-pager">
            <button class="btn" id="mcPrev">Prev</button>
            <span id="mcPageInfo" class="muted"></span>
            <button class="btn" id="mcNext">Next</button>
        </div>
    </div>
</div>



<style>
    /* ---------- container & header ---------- */
    .DashboardTableContainerE {
        margin-top: 12px;
        height: 700px;
    }

    .DTH {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 8px 4px 10px;
    }

        .DTH h5 {
            margin: 0;
            font-weight: 600;
            color: #0f172a;
        }

    /* ---------- filter bar ---------- */
    .DTFilters {
        padding: 12px 16px;
        background: #fff;
        border: 1px solid #e9edf4;
        border-radius: 10px;
        margin-bottom: 12px;
    }

    .DTFilterRow {
        display: flex;
        flex-wrap: wrap;
        gap: 12px;
        align-items: flex-end;
    }

    .DTField {
        display: flex;
        flex-direction: column;
        min-width: 190px;
    }

        .DTField label {
            font-size: 12px;
            color: #667085;
            margin-bottom: 6px;
        }

        .DTField input, .DTField select {
            height: 36px;
            border: 1px solid #d0d5dd;
            border-radius: 8px;
            padding: 0 10px;
            font-size: 14px;
        }

    .DTButtons {
        margin-left: auto;
        display: flex;
        gap: 8px;
    }

    .btn {
        height: 36px;
        border-radius: 8px;
        padding: 0 14px;
        font-weight: 600;
        font-size: 14px;
        cursor: pointer;
    }

    .btn-primary {
        background: #4f46e5;
        color: #fff;
        border: 1px solid #4f46e5;
    }

    .btn-light {
        background: #fff;
        color: #344054;
        border: 1px solid #d0d5dd;
    }

    .btn-soft-info {
        background: #e6f2ff;
        color: #1d4ed8;
        border: 1px solid #cfe4ff;
    }

    /* ---------- table ---------- */
    .DTTableWrap {
        background: #fff;
        border: 1px solid #e9edf4;
        border-radius: 10px;
        overflow: auto;
        height: 550px;
    }

    .DTTable {
        border-collapse: separate;
        border-spacing: 0;
        width: 100%;
    }

        .DTTable th, .DTTable td {
            padding: 12px 14px;
            white-space: nowrap;
        }

        .DTTable thead tr {
            background: #f8fafc;
            color: #667085;
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: .02em;
        }

        .DTTable tbody tr {
            border-top: 1px solid #f1f4f9;
            cursor: pointer;
        }

            .DTTable tbody tr:hover {
                background: #f9fbff;
            }

    .muted {
        color: #64748b;
    }
    .mc-pager {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        gap: 10px;
        padding: 10px 14px;
        border-top: 1px solid var(--bd);
    }

    .merchantCell {
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .merchantCell img {
            width: 36px;
            height: 36px;
            border-radius: 999px;
            object-fit: cover;
            border: 1px solid #e5e7eb;
        }

        .merchantCell .m-name {
            font-weight: 800
        }

        .merchantCell .m-id {
            font-size: 12px;
            color: #64748b
        }

    .chip {
        display: inline-flex;
        align-items: center;
        gap: .4rem;
        padding: .25rem .6rem;
        border-radius: 999px;
        border: 1px solid var(--bd);
        background: var(--chip);
        font-weight: 700;
        font-size: .75rem;
        color: #334155;
    }

    .chip-paid {
        background: #e8fff1;
        border-color: #ccf3db;
        color: #117B34;
    }

    .chip-pending {
        background: #fff8e6;
        border-color: #ffe4b3;
        color: #a16207;
    }

    .chip-failed {
        background: #ffe8e8;
        border-color: #ffcfcf;
        color: #b91c1c;
    }

    .chip-open {
        background: #eef6ff;
        border-color: #d7e9ff;
        color: #1d4ed8;
    }

    .chip-cancel {
        background: #f1f5f9;
        border-color: #e2e8f0;
        color: #475569;
    }
    /* ---------- actions dropdown ---------- */
    .DTActionCol {
        width: 1%;
    }

    .icon-dot {
        width: 28px;
        height: 28px;
        border-radius: 6px;
        border: 1px solid #e5e7eb;
        background: #fff;
        line-height: 24px;
        font-size: 18px;
        cursor: pointer;
    }

    .manual-dropdown {
        position: relative;
        display: inline-block
    }

        .manual-dropdown .dd-menu {
            position: absolute;
            right: 0;
            top: 110%;
            min-width: 9rem;
            background: #fff;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            box-shadow: 0 10px 20px rgba(0,0,0,.08);
            display: none;
            z-index: 50
        }

            .manual-dropdown .dd-menu.show {
                display: block
            }

        .manual-dropdown .dd-item {
            display: block;
            padding: .5rem .75rem;
            color: #334155;
            text-decoration: none;
            width: 100%;
            text-align: left;
            background: #fff;
            border: 0
        }

            .manual-dropdown .dd-item:hover {
                background: #f8fafc
            }
</style>


<script>
    (function(){
      // --- Demo data (replace with your API result) ---
      const merchants = [
        { id:'MER-1001', name:'Stellar Apartments', email:'contact@stellarapt.com', phone:'+234 801 222 3333', city:'Lagos', apartments:12, status:'Approved', created:'2025-08-10', avatar:'/images/users/avatar-6.jpg' },
        { id:'MER-1002', name:'Urban Estates', email:'hello@urbanestates.com', phone:'+234 801 777 8888', city:'Abuja', apartments:9, status:'Pending', created:'2025-08-12', avatar:'/images/users/avatar-7.jpg' },
        { id:'MER-1003', name:'Green Valley Condos', email:'info@greenvalley.com', phone:'+234 801 555 1010', city:'Lagos', apartments:6, status:'Approved', created:'2025-07-30', avatar:'/images/users/avatar-4.jpg' },
        { id:'MER-1004', name:'Palmview Homes', email:'team@palmview.ng', phone:'+234 801 900 4433', city:'Port Harcourt', apartments:3, status:'Declined', created:'2025-08-01', avatar:'/images/users/avatar-3.jpg' },
        { id:'MER-1005', name:'Harbour Suites', email:'ops@harboursuites.com', phone:'+234 801 990 5511', city:'Lagos', apartments:14, status:'Approved', created:'2025-08-11', avatar:'/images/users/avatar-8.jpg' },
      ];

      // --- State ---
      let page = 1, pageSize = 8;
      let filters = { q:'', status:'', city:'', from:'', to:'', sort:'status-desc' };

      // --- Elements ---
      const body = document.getElementById('mcBody');
      const mcCount = document.getElementById('mcCount');
      const pageInfo = document.getElementById('mcPageInfo');
      const btnPrev = document.getElementById('mcPrev');
      const btnNext = document.getElementById('mcNext');

      const q = document.getElementById('mcQ');
      const fStatus = document.getElementById('mcStatus');
      const fCity = document.getElementById('mcCity');
      const fFrom = document.getElementById('mcFrom');
      const fTo = document.getElementById('mcTo');
      const fSort = document.getElementById('mcSort');

      document.getElementById('mcApply').addEventListener('click', ()=>{
        filters = {
          q: q.value.trim().toLowerCase(),
          status: fStatus.value,
          city: fCity.value.trim().toLowerCase(),
          from: fFrom.value,
          to: fTo.value,
          sort: fSort.value
        };
        page = 1;
        render();
      });
      document.getElementById('mcReset').addEventListener('click', ()=>{
        [q,fStatus,fCity,fFrom,fTo,fSort].forEach(el=>el.value='');
        filters = { q:'', status:'', city:'', from:'', to:'', sort:'status-desc' };
        page = 1;
        render();
      });

      btnPrev.addEventListener('click', ()=>{ if(page>1){ page--; render(); } });
      btnNext.addEventListener('click', ()=>{ page++; render(); });

      // --- Helpers ---
      const within = (d, from, to) => {
        if (!from && !to) return true;
        const x = new Date(d + 'T00:00:00');
        if (from && x < new Date(from)) return false;
        if (to && x > new Date(to + 'T23:59:59')) return false;
        return true;
      };
      const chip = (status) => {
        const s = String(status).toLowerCase();
        let cls = 'chip-open';
        if (s==='approved') cls='chip-paid';
        else if (s==='pending') cls='chip-pending';
        else if (s==='declined') cls='chip-failed';
        return `<span class="chip ${cls}">${status}</span>`;
      };

      function applyFilters(list){
        return list.filter(m=>{
          if (filters.q) {
            const blob = (m.id+' '+m.name+' '+m.email+' '+m.phone).toLowerCase();
            if (!blob.includes(filters.q)) return false;
          }
          if (filters.status && m.status !== filters.status) return false;
          if (filters.city && !m.city.toLowerCase().includes(filters.city)) return false;
          if (!within(m.created, filters.from, filters.to)) return false;
          return true;
        });
      }

      function sortList(list){
        const byName = (a,b)=> a.name.localeCompare(b.name);
        const byCreated = (a,b)=> new Date(a.created)-new Date(b.created);
        const statusRank = s => ({Approved:2, Pending:1, Declined:0}[s] ?? 0);

        switch(filters.sort){
          case 'name-asc': return list.sort(byName);
          case 'name-desc': return list.sort((a,b)=> byName(b,a));
          case 'created-asc': return list.sort(byCreated);
          case 'created-desc': return list.sort((a,b)=> byCreated(b,a));
          case 'status-asc': return list.sort((a,b)=> statusRank(a.status)-statusRank(b.status) || byName(a,b));
          case 'status-desc':
          default: return list.sort((a,b)=> statusRank(b.status)-statusRank(a.status) || byName(a,b));
        }
      }

      function paginate(list){
        const total = list.length;
        const pages = Math.max(1, Math.ceil(total / pageSize));
        if (page > pages) page = pages;
        const start = (page-1)*pageSize;
        const slice = list.slice(start, start+pageSize);
        pageInfo.textContent = `Page ${page} of ${pages}`;
        btnPrev.disabled = page<=1;
        btnNext.disabled = page>=pages;
        mcCount.textContent = total;
        return slice;
      }

      function rowHtml(m){
        const profileUrl = `/Merchant/MerchantProfile`;
        return `
          <tr class="DTClickable" data-href="${profileUrl}">
            <td>
              <div class="merchantCell">
                <img src="${m.avatar || '/images/users/avatar-5.jpg'}" alt="">
                <div>
                  <div class="m-name">${m.name}</div>
                  <div class="m-id muted">${m.id}</div>
                </div>
              </div>
            </td>
            <td>
              <div>${m.email || '—'}</div>
              <div class="muted">${m.phone || ''}</div>
            </td>
            <td>${m.city || '—'}</td>
            <td>${m.apartments ?? 0}</td>
            <td>${chip(m.status)}</td>
            <td class="muted">${m.created}</td>
            <td class="DTActionCol">
              <div class="manual-dropdown">
                <button class="icon-dot" data-dd-button>⋯</button>
                <ul class="dd-menu">
                  <li><a class="dd-item" href="${profileUrl}">View Profile</a></li>
                  <li><button class="dd-item" data-act="approve" data-id="${m.id}">Approve</button></li>
                  <li><button class="dd-item" data-act="decline" data-id="${m.id}">Decline</button></li>
                </ul>
              </div>
            </td>
          </tr>
        `;
      }

      function wireRowBehaviors(container){
        // clickable row
        container.querySelectorAll('.DTClickable').forEach(tr=>{
          tr.addEventListener('click', (e)=>{
            // ignore clicks from dropdown button/links
            if (e.target.closest('.manual-dropdown')) return;
            const url = tr.getAttribute('data-href');
            if (url) window.location.href = url;
          });
        });
        // dropdowns
        container.querySelectorAll('[data-dd-button]').forEach(btn=>{
          btn.addEventListener('click', (e)=>{
            e.stopPropagation();
            const menu = btn.nextElementSibling;
            document.querySelectorAll('.dd-menu').forEach(m=>m!==menu && m.classList.remove('show'));
            menu.classList.toggle('show');
          });
        });
        document.addEventListener('click', ()=> {
          document.querySelectorAll('.dd-menu').forEach(m=>m.classList.remove('show'));
        });
        // actions (wire to backend later)
        container.querySelectorAll('.dd-item[data-act]').forEach(b=>{
          b.addEventListener('click', (e)=>{
            e.stopPropagation();
            const act = b.dataset.act, id = b.dataset.id;
            console.log('merchant action:', act, id);
            // TODO: POST /Merchants/{id}/approve or /decline then refresh list
          });
        });
      }

      function render(){
        const filtered = applyFilters([...merchants]);
        const sorted = sortList(filtered);
        const pageData = paginate(sorted);
        body.innerHTML = pageData.map(rowHtml).join('');
        wireRowBehaviors(body);
      }

      render();

      // Export (demo)
      document.getElementById('mcExport').addEventListener('click', ()=>{
        alert('Export CSV coming soon (hook to backend).');
      });
    })();
</script>
