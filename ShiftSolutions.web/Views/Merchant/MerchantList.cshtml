
<div class="pageTitleBox d-sm-flex align-items-center justify-content-between">
    <h4>All Merchants</h4>
    <p>Merchants <span>›</span> All Merchants</p>
</div>

<div class="p-4">
    <div class="DashboardTableContainerE" id="merchantList">
        <!-- Header + actions -->
        <div class="DTH">
            <div class="flex items-center gap-2">
                <h5 class="mb-0">All Merchants</h5>
                <span class="chip"><strong id="mcCount">0</strong>&nbsp;total</span>
            </div>
            <div class="flex gap-2">
                <button class="btn btn-soft-info" id="mcExport">Export CSV</button> 
            </div>
        </div>

        <!-- Filters -->
        <div class="DTFilters">
            <div class="DTFilterRow">
                <div class="DTField">
                    <label>Search</label>
                    <input id="mcQ" placeholder="Name, email, phone…">
                </div>
                <div class="DTField">
                    <label>Status</label>
                    <select id="mcStatus">
                        <option value="">All</option>
                        <option value="Approved">Approved</option>
                        <option value="Pending">Pending</option>
                        <option value="Declined">Declined</option>
                    </select>
                </div>
                <div class="DTField">
                    <label>City</label>
                    <input id="mcCity" placeholder="e.g., Lagos">
                </div>
                <div class="DTField">
                    <label>From</label>
                    <input type="date" id="mcFrom">
                </div>
                <div class="DTField">
                    <label>To</label>
                    <input type="date" id="mcTo">
                </div>

                <div class="DTButtons">
                    <button class="btn btn-primary" id="mcApply">Apply</button>
                    <button class="btn btn-light" id="mcReset">Reset</button>
                </div>
            </div>

            <!-- Sort row -->
            <div class="DTFilterRow" style="grid-template-columns:repeat(6,minmax(0,1fr))">
                <div class="DTField">
                    <label>Sort by</label>
                    <select id="mcSort">
                        <option value="status-desc">Status: Approved → Others</option>
                        <option value="status-asc">Status: Others → Approved</option>
                        <option value="name-asc">Name A → Z</option>
                        <option value="name-desc">Name Z → A</option>
                        <option value="created-desc">Created: Newest</option>
                        <option value="created-asc">Created: Oldest</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- Table -->
      
            <div class="DTTableWrap">
                <table class="DTTable w-full">
                    <thead>
                        <tr class="DTHMain">
                            <th>Merchant</th>
                            <th>Contact</th>
                            <th>City</th>
                            <th>Apartments</th>
                            <th>Status</th>
                            <th>Created</th>
                            <th class="DTActionCol">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="mcBody">
                        <tr></tr>
                        
                      
                    </tbody>
                </table>
            </div> 

        <!-- Simple pagination (client-side) -->
        <div class="mc-pager">
            <button class="btn" id="mcPrev">Prev</button>
            <span id="mcPageInfo" class="muted"></span>
            <button class="btn" id="mcNext">Next</button>
        </div>
    </div>
</div>



<style>
    /* ---------- container & header ---------- */
    .DashboardTableContainerE {
        margin-top: 12px;
        height: 700px;
    }

    .DTH {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 8px 4px 10px;
    }

        .DTH h5 {
            margin: 0;
            font-weight: 600;
            color: #0f172a;
        }

    /* ---------- filter bar ---------- */
    .DTFilters {
        padding: 12px 16px;
        background: #fff;
        border: 1px solid #e9edf4;
        border-radius: 10px;
        margin-bottom: 12px;
    }

    .DTFilterRow {
        display: flex;
        flex-wrap: wrap;
        gap: 12px;
        align-items: flex-end;
    }

    .DTField {
        display: flex;
        flex-direction: column;
        min-width: 190px;
    }

        .DTField label {
            font-size: 12px;
            color: #667085;
            margin-bottom: 6px;
        }

        .DTField input, .DTField select {
            height: 36px;
            border: 1px solid #d0d5dd;
            border-radius: 8px;
            padding: 0 10px;
            font-size: 14px;
        }

    .DTButtons {
        margin-left: auto;
        display: flex;
        gap: 8px;
    }

    .btn {
        height: 36px;
        border-radius: 8px;
        padding: 0 14px;
        font-weight: 600;
        font-size: 14px;
        cursor: pointer;
    }

    .btn-primary {
        background: #4f46e5;
        color: #fff;
        border: 1px solid #4f46e5;
    }

    .btn-light {
        background: #fff;
        color: #344054;
        border: 1px solid #d0d5dd;
    }

    .btn-soft-info {
        background: #e6f2ff;
        color: #1d4ed8;
        border: 1px solid #cfe4ff;
    }

    /* ---------- table ---------- */
    .DTTableWrap {
        background: #fff;
        border: 1px solid #e9edf4;
        border-radius: 10px;
        overflow: auto;
        height: 550px;
    }

    .DTTable {
        border-collapse: separate;
        border-spacing: 0;
        width: 100%;
    }

        .DTTable th, .DTTable td {
            padding: 12px 14px;
            white-space: nowrap;
        }

        .DTTable thead tr {
            background: #f8fafc;
            color: #667085;
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: .02em;
        }

        .DTTable tbody tr {
            border-top: 1px solid #f1f4f9;
            cursor: pointer;
        }

            .DTTable tbody tr:hover {
                background: #f9fbff;
            }

    .muted {
        color: #64748b;
    }
    .mc-pager {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        gap: 10px;
        padding: 10px 14px;
        border-top: 1px solid var(--bd);
    }

    .merchantCell {
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .merchantCell img {
            width: 36px;
            height: 36px;
            border-radius: 999px;
            object-fit: cover;
            border: 1px solid #e5e7eb;
        }

        .merchantCell .m-name {
            font-weight: 800
        }

        .merchantCell .m-id {
            font-size: 12px;
            color: #64748b
        }

    .chip {
        display: inline-flex;
        align-items: center;
        gap: .4rem;
        padding: .25rem .6rem;
        border-radius: 999px;
        border: 1px solid var(--bd);
        background: var(--chip);
        font-weight: 700;
        font-size: .75rem;
        color: #334155;
    }

    .chip-paid {
        background: #e8fff1;
        border-color: #ccf3db;
        color: #117B34;
    }

    .chip-pending {
        background: #fff8e6;
        border-color: #ffe4b3;
        color: #a16207;
    }

    .chip-failed {
        background: #ffe8e8;
        border-color: #ffcfcf;
        color: #b91c1c;
    }

    .chip-open {
        background: #eef6ff;
        border-color: #d7e9ff;
        color: #1d4ed8;
    }

    .chip-cancel {
        background: #f1f5f9;
        border-color: #e2e8f0;
        color: #475569;
    }
    /* ---------- actions dropdown ---------- */
    .DTActionCol {
        width: 1%;
    }

    .icon-dot {
        width: 28px;
        height: 28px;
        border-radius: 6px;
        border: 1px solid #e5e7eb;
        background: #fff;
        line-height: 24px;
        font-size: 18px;
        cursor: pointer;
    }

    .manual-dropdown {
        position: relative;
        display: inline-block
    }

        .manual-dropdown .dd-menu {
            position: absolute;
            right: 0;
            top: 110%;
            min-width: 9rem;
            background: #fff;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            box-shadow: 0 10px 20px rgba(0,0,0,.08);
            display: none;
            z-index: 50
        }

            .manual-dropdown .dd-menu.show {
                display: block
            }

        .manual-dropdown .dd-item {
            display: block;
            padding: .5rem .75rem;
            color: #334155;
            text-decoration: none;
            width: 100%;
            text-align: left;
            background: #fff;
            border: 0
        }

            .manual-dropdown .dd-item:hover {
                background: #f8fafc
            }
</style>


<script>
    (() => {
        // ---------- state ----------
        let page = 1, pageSize = 12;
        let filters = { q: '', status: '', city: '', from: '', to: '', sort: 'status-desc' };

        // ---------- elements ----------
        const body = document.getElementById('mcBody');
        const mcCount = document.getElementById('mcCount');
        const pageInfo = document.getElementById('mcPageInfo');
        const btnPrev = document.getElementById('mcPrev');
        const btnNext = document.getElementById('mcNext');

        const q = document.getElementById('mcQ');
        const fStatus = document.getElementById('mcStatus');
        const fCity = document.getElementById('mcCity');
        const fFrom = document.getElementById('mcFrom');
        const fTo = document.getElementById('mcTo');
        const fSort = document.getElementById('mcSort');

        // ---------- helpers ----------
        const chip = (status) => {
            const s = String(status || '').toLowerCase();
            let cls = 'chip-open';
            if (s === 'approved') cls = 'chip-paid';
            else if (s === 'pending') cls = 'chip-pending';
            else if (s === 'declined') cls = 'chip-failed';
            return `<span class="chip ${cls}">${status || '—'}</span>`;
        };

        const html = (m) => {
            const profileUrl = `/Merchant/Profile?id=${encodeURIComponent(m.agentId)}`;
            return `
          <tr class="DTClickable" data-href="${profileUrl}">
            <td>
              <div class="merchantCell">
                <img src="${m.avatar || '/images/users/avatar-5.jpg'}" alt="">
                <div>
                  <div class="m-name">${m.displayName || m.companyName || '—'}</div>
                  <div class="m-id muted">${m.agentId || ''}</div>
                </div>
              </div>
            </td>
            <td>
              <div>${m.contact || '—'}</div>
              <div class="muted">${m.phone || ''}</div>
            </td>
            <td>${m.city || '—'}</td>
            <td>${m.apartmentsCount ?? 0}</td>
            <td>${chip(m.approvalStatus)}</td>
            <td class="muted">${(m.createdAt || '').substring(0, 10)}</td>
            <td class="DTActionCol">
              <div class="manual-dropdown">
                <button class="icon-dot" data-dd-button>⋯</button>
                <ul class="dd-menu">
                  <li><a class="dd-item" href="${profileUrl}">View Profile</a></li>
                  <li><button class="dd-item" data-act="approve" data-id="${m.agentId}">Approve</button></li>
                  <li><button class="dd-item" data-act="decline" data-id="${m.agentId}">Decline</button></li>
                </ul>
              </div>
            </td>
          </tr>`;
        };

        function wireRowBehaviors(container) {
            // row click -> profile
            container.querySelectorAll('.DTClickable').forEach(tr => {
                tr.addEventListener('click', (e) => {
                    if (e.target.closest('.manual-dropdown')) return;
                    const url = tr.getAttribute('data-href');
                    if (url) window.location.href = url;
                });
            });
            // 3-dot menus
            container.querySelectorAll('[data-dd-button]').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const menu = btn.nextElementSibling;
                    document.querySelectorAll('.dd-menu').forEach(m => m !== menu && m.classList.remove('show'));
                    menu.classList.toggle('show');
                });
            });
            document.addEventListener('click', () => {
                document.querySelectorAll('.dd-menu').forEach(m => m.classList.remove('show'));
            });

            // approve / decline
            container.querySelectorAll('.dd-item[data-act]').forEach(b => {
                b.addEventListener('click', async (e) => {
                    e.stopPropagation();
                    const act = b.dataset.act, id = b.dataset.id;
                    if (act === 'approve') {
                        await postForm('/Merchant/Approve', { id });
                        await load(); // refresh page data
                    } else if (act === 'decline') {
                        const reason = prompt('Reason for decline?');
                        if (!reason) return;
                        await postForm('/Merchant/Decline', { Id: id, Reason: reason });
                        await load();
                    }
                });
            });
        }

        // get anti-forgery token if you render one on the page (recommended)
        function getCsrf() {
            const input = document.querySelector('input[name="__RequestVerificationToken"]');
            return input ? input.value : null;
        }
        async function postForm(url, data) {
            const token = getCsrf();
            const form = new URLSearchParams(data);
            if (token) form.append('__RequestVerificationToken', token);
            const res = await fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: form.toString()
            });
            if (!res.ok) {
                const t = await res.text();
                alert('Request failed: ' + t);
            }
        }

        // ---------- data loading from server ----------
        async function load() {
            const params = new URLSearchParams({
                page, pageSize,
                search: filters.q,
                status: filters.status,
                city: filters.city,
                from: filters.from || '',
                to: filters.to || '',
                sort: mapSort(filters.sort) // map UI sort to server sort
            });

            const res = await fetch('/Merchant/ListData?' + params.toString(), { cache: 'no-store' });
            if (!res.ok) {
                body.innerHTML = `<tr><td colspan="7" class="muted">Failed to load merchants.</td></tr>`;
                return;
            }
            const data = await res.json();
            // data: { items, page, pageSize, totalItems }
            mcCount.textContent = data.totalItems ?? 0;

            const total = data.totalItems ?? 0;
            const pages = Math.max(1, Math.ceil(total / (data.pageSize || pageSize)));
            page = Math.min(Math.max(1, data.page || page), pages);

            pageInfo.textContent = `Page ${page} of ${pages}`;
            btnPrev.disabled = page <= 1;
            btnNext.disabled = page >= pages;

            body.innerHTML = (data.items || []).map(html).join('') || `
          <tr><td colspan="7" class="muted">No merchants found.</td></tr>`;
            wireRowBehaviors(body);
        }

        // map your UI sort values to the controller/service sort keys
        function mapSort(val) {
            switch (val) {
                case 'name-asc': return 'name_asc';
                case 'name-desc': return 'name_desc';
                case 'created-asc': return 'created_asc';
                case 'created-desc': return 'created_desc';
                case 'status-asc': return 'status_asc';  // optional: implement in service if needed
                case 'status-desc': return 'status_desc'; // optional
                default: return 'created_desc';
            }
        }

        // ---------- wire filters & pager ----------
        document.getElementById('mcApply').addEventListener('click', () => {
            filters = {
                q: q.value.trim(),
                status: fStatus.value,
                city: fCity.value.trim(),
                from: fFrom.value,
                to: fTo.value,
                sort: fSort.value || 'created-desc'
            };
            page = 1;
            load();
        });
        document.getElementById('mcReset').addEventListener('click', () => {
            [q, fStatus, fCity, fFrom, fTo, fSort].forEach(el => el.value = '');
            filters = { q: '', status: '', city: '', from: '', to: '', sort: 'created-desc' };
            page = 1;
            load();
        });
        document.getElementById('mcPrev').addEventListener('click', () => { if (page > 1) { page--; load(); } });
        document.getElementById('mcNext').addEventListener('click', () => { page++; load(); });

        // initial
        load();
    })();
</script>

