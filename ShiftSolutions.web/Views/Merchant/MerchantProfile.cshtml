@model ShiftSolutions.web.Application.Merchants.MerchantDto
@{
    var name = string.IsNullOrWhiteSpace(Model.DisplayName) ? Model.CompanyName : Model.DisplayName;
    string StatusChipClass(string s)
    {
        s = (s ?? "").ToLowerInvariant();
        if (s == "approved") return "chip chip-paid";
        if (s == "declined") return "chip chip-failed";
        if (s == "pending")  return "chip chip-pending";
        return "chip chip-open";
    }
}
@Html.AntiForgeryToken() <!-- so JS can grab the token -->

<div class="pageTitleBox d-sm-flex align-items-center justify-content-between">
    <h4>Merchant Profile</h4>
    <p>Administration <span>›</span> Merchants <span>›</span> Profile</p>
</div>

<div class="p-4">
    <div class="MP">
        <!-- Header -->
        <div class="MPHead card">
            <div class="mph-left">
                <img class="mph-avatar" src="@(Model.AvatarUrl ?? "/images/users/avatar-7.jpg")" alt="">
                <div>
                    <div class="mph-name">@name</div>
                    <div class="mph-sub muted">
                        @Model.AgentId • @Model.Email • @Model.Phone
                    </div>
                    <div class="mph-badges">
                        <span class="@StatusChipClass(Model.ApprovalStatus)" id="mpStatus">
                            @(!string.IsNullOrWhiteSpace(Model.ApprovalStatus) ? Model.ApprovalStatus : "Pending")
                        </span>
                        <span class="chip">Created: @Model.CreatedAt.ToString("yyyy-MM-dd")</span>
                        <span class="chip">City: @Model.City</span>
                    </div>
                </div>
            </div>
            <div class="mph-actions">
                <button class="btn btn-light" onclick="history.back()">Back</button>
                <button class="btn btn-danger" id="openDecline">Decline</button>
                <button class="btn btn-primary" id="openApprove">Approve</button>
            </div>
        </div>

        <!-- Grid -->
        <div class="MPGrid">
            <!-- Review Information -->
            <div class="card">
                <div class="card-h"><h3>Review Information</h3></div>
                <div class="mp-info">
                    <div class="mp-row">
                        <div class="mp-key">Business Name</div>
                        <div class="mp-val">@name</div>
                    </div>
                    <div class="mp-row">
                        <div class="mp-key">RC / CAC Number</div>
                        <div class="mp-val">@Model.Notes</div> <!-- swap to your real field if you have CAC -->
                    </div>
                    <div class="mp-row">
                        <div class="mp-key">Contact Person</div>
                        <div class="mp-val">@Model.ContactName • @Model.ContactPhone</div>
                    </div>
                    <div class="mp-row">
                        <div class="mp-key">Email</div>
                        <div class="mp-val">@Model.Email</div>
                    </div>
                    <div class="mp-row">
                        <div class="mp-key">Address</div>
                        <div class="mp-val">@Model.Address</div>
                    </div>
                    <div class="mp-row">
                        <div class="mp-key">Bank</div>
                        <div class="mp-val">@Model.BankName • @Model.BankAccountNumber • @Model.BankAccountName</div>
                    </div>
                    <div class="mp-row">
                        <div class="mp-key">Apartment Count</div>
                        <div class="mp-val">@Model.ApartmentsCount listed</div>
                    </div>
                    <div class="mp-row">
                        <div class="mp-key">Notes</div>
                        <div class="mp-val muted">@Model.Notes</div>
                    </div>
                </div>
            </div>

            <!-- Documents -->
            <div class="card">
                <div class="card-h"><h3>Documents</h3></div>
                <div class="mp-docs">
                    @if (Model.Documents?.Any() == true)
                    {
                        foreach (var d in Model.Documents)
                        {
                            var kind = (d.Kind ?? "").ToLowerInvariant();
                            var ico = kind == "pdf" ? "pdf" : "img";
                            <div class="doc-tile">
                                <div class="doc-ico @ico">@((ico=="pdf")?"PDF":"IMG")</div>
                                <div class="doc-meta">
                                    <div class="doc-name">@d.Name</div>
                                    <div class="doc-sub muted">Uploaded @d.UploadedAt </div>
                                </div>
                                <div class="doc-actions">
                                    <a class="btn btn-light" href="@d.Url" target="_blank" rel="noopener">View</a>
                                    <a class="btn btn-soft-info" href="@d.Url" download>Download</a>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="muted">No documents.</div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Photos / Carousel -->
<div class="MerchantPictureUnder">
    <div class="card" id="merchantPhotosCard">
        <div class="card-h">
            <h3 class="mb-0">Merchant Photos</h3>
            <span class="muted" id="mpcCount">@(Model.PhotoUrls?.Count ?? 0) images</span>
        </div>
        <div class="mp-carousel" id="mpCarousel" aria-roledescription="carousel">
            <div class="mpc-viewport">
                <div class="mpc-track" id="mpcTrack" role="list">
                    @if (Model.PhotoUrls?.Any() == true)
                    {
                        for (int i = 0; i < Model.PhotoUrls.Count; i++)
                        {
                            <div class="mpc-slide" role="listitem">
                                <img src="@Model.PhotoUrls[i]" alt="Merchant photo @(i+1)" loading="lazy" />
                            </div>
                        }
                    }
                </div>
                <button class="mpc-nav mpc-prev" id="mpcPrev" aria-label="Previous image">‹</button>
                <button class="mpc-nav mpc-next" id="mpcNext" aria-label="Next image">›</button>
            </div>
            <div class="mpc-dots" id="mpcDots" role="tablist" aria-label="Carousel Pagination"></div>
        </div>
    </div>
</div>

<!-- LIGHTBOX (unchanged) ... -->
<!-- APPROVE MODAL -->
<div class="obd-overlay" id="approveModal" aria-hidden="true">
  <div class="obd-modal" role="dialog" aria-modal="true" aria-labelledby="apTitle">
    <button class="modal-close" data-close>✕</button>
    <h3 id="apTitle" class="mb-2">Assign Staff & Approve</h3>
    <p class="muted mb-2">Choose a staff member who will manage this merchant after approval.</p>

    <form id="approveForm" class="rf-form">
      <input type="hidden" id="agentId" value="@Model.AgentId" />
      <div class="rf-row">
        <label class="fw-bold">Staff <span class="muted">(required)</span></label>
        <select id="apStaff" required>
          <option value="">Loading staff…</option>
        </select>
      </div>
      <div class="rf-row">
        <label>Note (optional)</label>
        <input id="apNote" placeholder="Internal note">
      </div>
      <div class="rf-actions">
        <button type="button" class="btn btn-light" data-close>Cancel</button>
        <button type="submit" class="btn btn-primary">Approve</button>
      </div>
    </form>
  </div>
</div>

<!-- DECLINE MODAL -->
<div class="obd-overlay" id="declineModal" aria-hidden="true">
  <div class="obd-modal" role="dialog" aria-modal="true" aria-labelledby="dcTitle">
    <button class="modal-close" data-close>✕</button>
    <h3 id="dcTitle" class="mb-2">Decline Merchant</h3>
    <p class="muted mb-2">Provide a reason for declining this merchant.</p>

    <form id="declineForm" class="rf-form">
      <input type="hidden" id="declineId" value="@Model.AgentId" />
      <div class="rf-row">
        <label class="fw-bold">Reason <span class="muted">(required)</span></label>
        <textarea id="dcReason" rows="4" placeholder="Why is this application being declined?" required></textarea>
      </div>
      <div class="rf-actions">
        <button type="button" class="btn btn-light" data-close>Cancel</button>
        <button type="submit" class="btn btn-danger">Decline</button>
      </div>
    </form>
  </div>
</div>
<style>
    /* =========================================================
   Merchant Profile – FULL CSS (standalone)
   ========================================================= */

/* ---------- Tokens ---------- */
:root {
  --ink: #0f172a;          /* primary text */
  --muted: #64748b;        /* secondary text */
  --line: #e5eaf2;         /* borders */
  --line-2: #dbe4ef;       /* stronger borders */

  --bg: #ffffff;           /* surfaces */
  --bg-soft: #fbfdff;

  --primary: #0ea5e9;      /* blue-500 */
  --primary-600: #0284c7;  /* blue-600 */
  --danger: #dc2626;       /* red-600 */
  --danger-700: #b91c1c;   /* red-700 */
  --info-soft: #eef6ff;    /* soft blue bg */

  --success: #16a34a;      /* green-600 */
  --warning: #f59e0b;      /* amber-600 */
  --slate: #94a3b8;        /* neutral for icons */

  --radius-lg: 14px;
  --radius-md: 10px;
  --radius-sm: 8px;

  --shadow-1: 0 8px 24px rgba(15, 23, 42, .08);
  --shadow-2: 0 16px 40px rgba(2, 6, 23, .12);
}
.MerchantPictureUnder{
    width: 100%;
    display: flex;
    justify-content: center;
}
/* ---------- Utilities ---------- */
.muted { color: var(--muted); }
.fw-bold { font-weight: 700; }
.mb-0 { margin-bottom: 0; }
.mb-2 { margin-bottom: .5rem; }
.flex { display: flex; }
.items-center { align-items: center; }
.gap-6 { gap: .375rem; }
.gap-8 { gap: .5rem; }
.gap-12 { gap: .75rem; }
.gap-14 { gap: .875rem; }
.gap-16 { gap: 1rem; }

/* ---------- Buttons ---------- */
.btn {
  display: inline-flex; align-items: center; justify-content: center;
  height: 38px; padding: 0 14px;
  border: 1px solid var(--line); border-radius: var(--radius-md);
  background: #fff; color: var(--ink); font-weight: 700;
  cursor: pointer; transition: background .15s ease, border-color .15s ease, transform .06s ease;
}
.btn:hover { background: #f8fafc; }
.btn:active { transform: translateY(1px); }

.btn-primary { background: var(--primary); color: #fff; border-color: var(--primary); }
.btn-primary:hover { background: var(--primary-600); border-color: var(--primary-600); }

.btn-danger { background: var(--danger); color: #fff; border-color: var(--danger); }
.btn-danger:hover { background: var(--danger-700); border-color: var(--danger-700); }

.btn-light { background: #fff; color: var(--ink); border-color: var(--line); }
.btn-soft-info { background: var(--info-soft); color: #1d4ed8; border-color: #d7e9ff; }

/* Icon-only small button (3 dots etc.) */
.icon-dot {
  width: 32px; height: 32px; line-height: 30px; text-align: center;
  border: 1px solid var(--line); border-radius: 8px; background: #fff; cursor: pointer;
}
.icon-dot:hover { background: #f1f5f9; }

/* ---------- Chips (status) ---------- */
.chip {
  display: inline-flex; align-items: center; gap: .4rem;
  padding: .275rem .65rem;
  border: 1px solid var(--line);
  border-radius: 999px;
  background: #f1f5f9;
  color: #334155; font-weight: 800; font-size: .75rem;
}
.chip-paid     { background: #e8fff1; border-color: #ccf3db; color: #117b34; }
.chip-pending  { background: #fff8e6; border-color: #ffe4b3; color: #a16207; }
.chip-failed   { background: #ffe8e8; border-color: #ffcfcf; color: #b91c1c; }
.chip-open     { background: #eef6ff; border-color: #d7e9ff; color: #1d4ed8; }

/* ---------- Page wrapper ---------- */
.MP { display: grid; gap: 14px; }

/* ---------- Card ---------- */
.card {
  background: var(--bg);
  border: 1px solid var(--line);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-1);
  padding: 14px;
}
.card-h { display: flex; align-items: center; justify-content: space-between; margin-bottom: 10px; }
.card h3 { margin: 0; font-size: 16px; font-weight: 800; }

/* ---------- Profile Header ---------- */
.MPHead { display: flex; align-items: center; justify-content: space-between; gap: 16px; }
.mph-left { display: flex; align-items: center; gap: 12px; }
.mph-avatar {
  width: 56px; height: 56px; border-radius: 999px; object-fit: cover;
  border: 1px solid var(--line);
}
.mph-name { font-size: 20px; font-weight: 800; color: var(--ink); }
.mph-sub { font-size: 13px; }
.mph-badges { display: flex; gap: 8px; flex-wrap: wrap; margin-top: 6px; }
.mph-actions { display: flex; gap: 8px; }

/* ---------- Grid (content) ---------- */
.MPGrid { display: grid; grid-template-columns: 1.1fr .9fr; gap: 14px; }


/* ---------- Review Information ---------- */
.mp-info { display: grid; gap: 8px; }
.mp-row {
  display: flex; justify-content: space-between; gap: 14px;
  border-bottom: 1px dashed var(--line); padding: 8px 0;
}
.mp-row:last-child { border-bottom: 0; }
.mp-key { color: var(--muted); min-width: 190px; }
.mp-val { font-weight: 700; color: var(--ink); }

/* ---------- Documents ---------- */
.mp-docs { display: grid; gap: 10px; }
.doc-tile {
  display: flex; align-items: center; gap: 12px;
  border: 1px solid var(--line); border-radius: 12px; padding: 10px;
  background: #fff;
}
.doc-ico {
  width: 40px; height: 40px; border-radius: 10px;
  display: flex; align-items: center; justify-content: center;
  color: #fff; font-weight: 800; letter-spacing: .5px;
}
.doc-ico.pdf { background: #ef4444; } /* red */
.doc-ico.img { background: var(--primary); } /* blue */
.doc-meta { flex: 1; min-width: 0; }
.doc-name { font-weight: 800; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
.doc-sub { font-size: 12px; }
.doc-actions { display: flex; gap: 8px; }

/* ---------- Timeline ---------- */
.timeline { list-style: none; margin: 0; padding: 0; }
.timeline li { display: flex; gap: 10px; position: relative; padding: 8px 0; }
.tl-dot { width: 10px; height: 10px; border-radius: 999px; background: var(--slate); margin-top: 5px; }
.tl-ok { background: var(--success); }
.tl-block .tl-title { font-weight: 800; color: var(--ink); }
.tl-block .tl-sub { font-size: 13px; color: var(--muted); }

/* ---------- Modals (overlay + content) ---------- */
.obd-overlay {
  position: fixed; inset: 0;
  background: rgba(2, 6, 23, .45);
  display: none; align-items: center; justify-content: center;
  padding: 16px; z-index: 9999;
}
.obd-overlay.show { display: flex; }

.obd-modal {
  width: 100%; max-width: 540px;
  background: #fff; border: 1px solid var(--line);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-2);
  padding: 16px 16px 12px; position: relative;
}
.modal-close {
  position: absolute; right: 16px; top: 12px;
  width: 30px; height: 30px; border: 1px solid var(--line);
  border-radius: var(--radius-sm); background: #fff; cursor: pointer;
}

/* ---------- Modal form ---------- */
.rf-form { display: grid; gap: 10px; margin-top: 10px; }
.rf-row { display: grid; gap: 6px; }
.rf-row input,
.rf-row select,
.rf-row textarea {
  min-height: 38px; padding: 8px 10px; font: inherit; color: var(--ink);
  border: 1px solid #d0d5dd; border-radius: var(--radius-md);
  background: #fff; outline: none;
  transition: border-color .15s ease, box-shadow .15s ease;
}
.rf-row textarea { resize: vertical; }
.rf-row input:focus,
.rf-row select:focus,
.rf-row textarea:focus {
  border-color: var(--primary);
  box-shadow: 0 0 0 3px color-mix(in srgb, var(--primary) 18%, transparent);
}
.rf-actions { display: flex; gap: 8px; justify-content: flex-end; margin-top: 6px; }

/* ---------- Page title breadcrumb (optional style) ---------- */
.pageTitleBox { display:flex; align-items:center; justify-content:space-between; margin-bottom:10px; }
.pageTitleBox h4 { margin:0; font-weight:800; font-size:18px; }
.pageTitleBox p { margin:0; color:var(--muted); }
.pageTitleBox span { opacity:.6; margin:0 .25rem; }
    /* -------- Carousel -------- */
    .mp-carousel {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
    }

    .mpc-viewport {
        width: 100%;
        max-width: 760px; /* center & keep modest width */
        aspect-ratio: 16 / 9; /* consistent frame; change if you prefer */
        border: 1px solid var(--line);
        border-radius: 14px;
        overflow: hidden;
        position: relative;
        background: #f3f4f6;
        margin: 0 auto; /* centered */
    }

    .mpc-track {
        display: flex;
        height: 100%;
        transition: transform .35s ease;
        will-change: transform;
    }

    .mpc-slide {
        min-width: 100%;
        height: 100%;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #e5e7eb;
    }

        .mpc-slide img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            display: block;
        }

    .mpc-nav {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        width: 38px;
        height: 38px;
        border-radius: 999px;
        border: 1px solid var(--line);
        background: #ffffffcc;
        backdrop-filter: saturate(140%) blur(2px);
        cursor: pointer;
        font-size: 22px;
        line-height: 36px;
        text-align: center;
        color: #0f172a;
        box-shadow: var(--shadow-1);
    }

    .mpc-prev {
        left: 10px;
    }

    .mpc-next {
        right: 10px;
    }

    .mpc-nav:hover {
        background: #fff;
    }

    .mpc-dots {
        display: flex;
        gap: 8px;
        flex-wrap: wrap;
        align-items: center;
        justify-content: center;
        margin-top: 6px;
    }

    .mpc-dot {
        width: 9px;
        height: 9px;
        border-radius: 999px;
        border: 1px solid var(--line);
        background: #e2e8f0;
        cursor: pointer;
    }

        .mpc-dot[aria-selected="true"] {
            background: var(--primary);
            border-color: var(--primary);
        }

    /* Touch highlight removal on mobile buttons */
    .mpc-nav, .mpc-dot {
        -webkit-tap-highlight-color: transparent;
    }
    /* Lightbox */
.mpc-lightbox{position:fixed;inset:0;display:none;align-items:center;justify-content:center;z-index:99999}
.mpc-lightbox.show{display:flex}
.mpc-lb-backdrop{position:absolute;inset:0;background:rgba(2,6,23,.75)}
.mpc-lb-frame{
  position:relative; z-index:1; max-width:min(92vw,1200px); max-height:min(92vh,800px);
  display:flex; align-items:center; justify-content:center; gap:10px;
}
.mpc-lb-frame img{max-width:100%; max-height:100%; border-radius:12px; box-shadow:0 20px 48px rgba(2,6,23,.35)}
.mpc-lb-prev,.mpc-lb-next,.mpc-lb-close{
  position:absolute; border:1px solid var(--line); background:#ffffffcc; backdrop-filter:saturate(140%) blur(2px);
  width:40px;height:40px;border-radius:999px;cursor:pointer;box-shadow:var(--shadow-1);font-size:20px;line-height:38px;text-align:center
}
.mpc-lb-prev{left:-50px; top:50%; transform:translateY(-50%)}
.mpc-lb-next{right:-50px; top:50%; transform:translateY(-50%)}
.mpc-lb-close{right:-12px; top:-12px; width:36px;height:36px;line-height:34px;background:#fff}

.mpc-lb-frame figcaption{position:absolute;left:0;right:0;bottom:-28px;text-align:center}


</style>

@section Scripts {
<script>
  // ---------- helpers ----------
  const open = id => document.getElementById(id).classList.add('show');
  const closeAll = () => document.querySelectorAll('.obd-overlay').forEach(o=>o.classList.remove('show'));

  document.getElementById('openApprove').addEventListener('click', ()=> open('approveModal'));
  document.getElementById('openDecline').addEventListener('click', ()=> open('declineModal'));
  document.querySelectorAll('[data-close]').forEach(b=> b.addEventListener('click', closeAll));
  document.querySelectorAll('.obd-overlay').forEach(ov=>{
    ov.addEventListener('click', e=>{ if(e.target===ov) closeAll(); });
  });

  function getCsrf() {
    const el = document.querySelector('input[name="__RequestVerificationToken"]');
    return el ? el.value : null;
  }
  async function postForm(url, data) {
    const token = getCsrf();
    const form = new URLSearchParams();
    Object.entries(data).forEach(([k,v]) => form.append(k, v));
    if (token) form.append('__RequestVerificationToken', token);

    const res = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: form.toString()
    });
    if (!res.ok) {
      const t = await res.text();
      throw new Error(t || 'Request failed');
    }
    return await res.json().catch(()=> ({}));
  }

  // ---------- Approve flow ----------
  let staffLoaded = false;
  async function loadStaffOptions() {
    if (staffLoaded) return;
    const sel = document.getElementById('apStaff');
    sel.innerHTML = '<option value="">Loading…</option>';
    const res = await fetch('/api/staff/options', { cache: 'no-store' });
    if (!res.ok) { sel.innerHTML = '<option value="">Failed to load</option>'; return; }
    const list = await res.json();
    sel.innerHTML = '<option value="">Select staff…</option>' +
      (list || []).map(o => `<option value="${o.id}">${o.name}</option>`).join('');
    staffLoaded = true;
  }
  document.getElementById('openApprove').addEventListener('click', loadStaffOptions);

  document.getElementById('approveForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const agentId = document.getElementById('agentId').value;
    const staffId = document.getElementById('apStaff').value;
    if (!staffId) { alert('Please select a staff to assign.'); return; }

    try {
      await postForm('/Merchant/Approve', { agentId: agentId, assignedStaffId: staffId });
      // UI feedback
      const st = document.getElementById('mpStatus');
      st.className = 'chip chip-paid';
      st.textContent = 'Approved';
      closeAll();
    } catch (err) {
      alert(err.message || 'Failed to approve.');
    }
  });

  // ---------- Decline flow ----------
  document.getElementById('declineForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const id = document.getElementById('declineId').value;
    const reason = document.getElementById('dcReason').value.trim();
    if (!reason) { alert('Please provide a decline reason.'); return; }

    try {
      await postForm('/Merchant/Decline', { 'Id': id, 'Reason': reason });
      const st = document.getElementById('mpStatus');
      st.className = 'chip chip-failed';
      st.textContent = 'Declined';
      closeAll();
    } catch (err) {
      alert(err.message || 'Failed to decline.');
    }
  });

  // ---------- Carousel dots (for the Razor-rendered slides) ----------
  (function(){
    const track = document.getElementById('mpcTrack');
    const dots  = document.getElementById('mpcDots');
    const prev  = document.getElementById('mpcPrev');
    const next  = document.getElementById('mpcNext');
    const slides = Array.from(track.children);
    if (!slides.length) { prev.style.display = next.style.display = 'none'; return; }
    let index = 0;

    function goTo(i){
      index = (i + slides.length) % slides.length;
      track.style.transform = `translateX(-${index*100}%)`;
      Array.from(dots.children).forEach((d, k)=> d.setAttribute('aria-selected', k===index ? 'true' : 'false'));
    }
    slides.forEach((_, i)=>{
      const dot = document.createElement('button');
      dot.className = 'mpc-dot'; dot.type = 'button';
      dot.setAttribute('role','tab'); dot.setAttribute('aria-label', `Go to image ${i+1}`);
      dot.addEventListener('click', e => { e.stopPropagation(); goTo(i); });
      dots.appendChild(dot);
    });
    goTo(0);
    next.addEventListener('click', e => { e.stopPropagation(); goTo(index+1); });
    prev.addEventListener('click', e => { e.stopPropagation(); goTo(index-1); });
  })();
</script>
}
