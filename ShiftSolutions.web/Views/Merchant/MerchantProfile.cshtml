@model ShiftSolutions.web.Application.Merchants.MerchantDto
@{
    var name = string.IsNullOrWhiteSpace(Model.DisplayName) ? Model.CompanyName : Model.DisplayName;
    string StatusChipClass(string s)
    {
        s = (s ?? "").ToLowerInvariant();
        if (s == "approved") return "chip chip-paid";
        if (s == "declined") return "chip chip-failed";
        if (s == "pending")  return "chip chip-pending";
        return "chip chip-open";
    }
}
@Html.AntiForgeryToken() <!-- so JS can grab the token -->

<div class="pageTitleBox d-sm-flex align-items-center justify-content-between">
    <h4>Merchant Profile</h4>
    <p>Administration <span>›</span> Merchants <span>›</span> Profile</p>
</div>

<div class="p-4">
    <div class="MP">
        <!-- Header -->
        <div class="MPHead card">
            <div class="mph-left">
                <img class="mph-avatar" src="@(Model.AvatarUrl ?? "/images/users/avatar-7.jpg")" alt="">
                <div>
                    <div class="mph-name">@name</div>
                    <div class="mph-sub muted">
                        @Model.AgentId • @Model.Email • @Model.Phone
                    </div>
                    <div class="mph-badges">
                        <span class="@StatusChipClass(Model.ApprovalStatus)" id="mpStatus">
                            @(!string.IsNullOrWhiteSpace(Model.ApprovalStatus) ? Model.ApprovalStatus : "Pending")
                        </span>
                        <span class="chip">Created: @Model.CreatedAt.ToString("yyyy-MM-dd")</span>
                        <span class="chip">City: @Model.City</span>
                    </div>
                </div>
            </div>
            <div class="mph-actions">
                <button class="btn btn-light" onclick="history.back()">Back</button>
                <button class="btn btn-danger" id="openDecline">Decline</button>
                <button class="btn btn-primary" id="openApprove">Approve</button>
            </div>
        </div>

        <!-- Grid -->
        <div class="MPGrid">
            <!-- Review Information -->
            <div class="card">
                <div class="card-h"><h3>Review Information</h3></div>
                <div class="mp-info">
                    <div class="mp-row">
                        <div class="mp-key">Business Name</div>
                        <div class="mp-val">@name</div>
                    </div>
                    <div class="mp-row">
                        <div class="mp-key">RC / CAC Number</div>
                        <div class="mp-val">@Model.Notes</div> <!-- swap to your real field if you have CAC -->
                    </div>
                    <div class="mp-row">
                        <div class="mp-key">Contact Person</div>
                        <div class="mp-val">@Model.ContactName • @Model.ContactPhone</div>
                    </div>
                    <div class="mp-row">
                        <div class="mp-key">Email</div>
                        <div class="mp-val">@Model.Email</div>
                    </div>
                    <div class="mp-row">
                        <div class="mp-key">Address</div>
                        <div class="mp-val">@Model.Address</div>
                    </div>
                    <div class="mp-row">
                        <div class="mp-key">Bank</div>
                        <div class="mp-val">@Model.BankName • @Model.BankAccountNumber • @Model.BankAccountName</div>
                    </div>
                    <div class="mp-row">
                        <div class="mp-key">Apartment Count</div>
                        <div class="mp-val">@Model.ApartmentsCount listed</div>
                    </div>
                    <div class="mp-row">
                        <div class="mp-key">Notes</div>
                        <div class="mp-val muted">@Model.Notes</div>
                    </div>
                </div>
            </div>

            <!-- Documents -->
            <div class="card">
                <div class="card-h"><h3>Documents</h3></div>
                <div class="mp-docs">
                    @if (Model.Documents?.Any() == true)
                    {
                        foreach (var d in Model.Documents)
                        {
                            var kind = (d.Kind ?? "").ToLowerInvariant();
                            var ico = kind == "pdf" ? "pdf" : "img";
                            <div class="doc-tile">
                                <div class="doc-ico @ico">@((ico=="pdf")?"PDF":"IMG")</div>
                                <div class="doc-meta">
                                    <div class="doc-name">@d.Name</div>
                                    <div class="doc-sub muted">Uploaded @d.UploadedAt </div>
                                </div>
                                <div class="doc-actions">
                                    <a class="btn btn-light" href="@d.Url" target="_blank" rel="noopener">View</a>
                                    <a class="btn btn-soft-info" href="@d.Url" download>Download</a>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="muted">No documents.</div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Photos / Carousel -->
<div class="MerchantPictureUnder">
    <div class="card" id="merchantPhotosCard">
        <div class="card-h">
            <h3 class="mb-0">Merchant Photos</h3>
            <span class="muted" id="mpcCount">@(Model.PhotoUrls?.Count ?? 0) images</span>
        </div>
        <div class="mp-carousel" id="mpCarousel" aria-roledescription="carousel">
            <div class="mpc-viewport">
                <div class="mpc-track" id="mpcTrack" role="list">
                    @if (Model.PhotoUrls?.Any() == true)
                    {
                        for (int i = 0; i < Model.PhotoUrls.Count; i++)
                        {
                            <div class="mpc-slide" role="listitem">
                                <img src="@Model.PhotoUrls[i]" alt="Merchant photo @(i+1)" loading="lazy" />
                            </div>
                        }
                    }
                </div>
                <button class="mpc-nav mpc-prev" id="mpcPrev" aria-label="Previous image">‹</button>
                <button class="mpc-nav mpc-next" id="mpcNext" aria-label="Next image">›</button>
            </div>
            <div class="mpc-dots" id="mpcDots" role="tablist" aria-label="Carousel Pagination"></div>
        </div>
    </div>
</div>

<!-- LIGHTBOX (unchanged) ... -->
<!-- APPROVE MODAL -->
<div class="obd-overlay" id="approveModal" aria-hidden="true">
  <div class="obd-modal" role="dialog" aria-modal="true" aria-labelledby="apTitle">
    <button class="modal-close" data-close>✕</button>
    <h3 id="apTitle" class="mb-2">Assign Staff & Approve</h3>
    <p class="muted mb-2">Choose a staff member who will manage this merchant after approval.</p>

    <form id="approveForm" class="rf-form">
      <input type="hidden" id="agentId" value="@Model.AgentId" />
      <div class="rf-row">
        <label class="fw-bold">Staff <span class="muted">(required)</span></label>
        <select id="apStaff" required>
          <option value="">Loading staff…</option>
        </select>
      </div>
      <div class="rf-row">
        <label>Note (optional)</label>
        <input id="apNote" placeholder="Internal note">
      </div>
      <div class="rf-actions">
        <button type="button" class="btn btn-light" data-close>Cancel</button>
        <button type="submit" class="btn btn-primary">Approve</button>
      </div>
    </form>
  </div>
</div>

<!-- DECLINE MODAL -->
<div class="obd-overlay" id="declineModal" aria-hidden="true">
  <div class="obd-modal" role="dialog" aria-modal="true" aria-labelledby="dcTitle">
    <button class="modal-close" data-close>✕</button>
    <h3 id="dcTitle" class="mb-2">Decline Merchant</h3>
    <p class="muted mb-2">Provide a reason for declining this merchant.</p>

    <form id="declineForm" class="rf-form">
      <input type="hidden" id="declineId" value="@Model.AgentId" />
      <div class="rf-row">
        <label class="fw-bold">Reason <span class="muted">(required)</span></label>
        <textarea id="dcReason" rows="4" placeholder="Why is this application being declined?" required></textarea>
      </div>
      <div class="rf-actions">
        <button type="button" class="btn btn-light" data-close>Cancel</button>
        <button type="submit" class="btn btn-danger">Decline</button>
      </div>
    </form>
  </div>
</div>

@section Scripts {
<script>
  // ---------- helpers ----------
  const open = id => document.getElementById(id).classList.add('show');
  const closeAll = () => document.querySelectorAll('.obd-overlay').forEach(o=>o.classList.remove('show'));

  document.getElementById('openApprove').addEventListener('click', ()=> open('approveModal'));
  document.getElementById('openDecline').addEventListener('click', ()=> open('declineModal'));
  document.querySelectorAll('[data-close]').forEach(b=> b.addEventListener('click', closeAll));
  document.querySelectorAll('.obd-overlay').forEach(ov=>{
    ov.addEventListener('click', e=>{ if(e.target===ov) closeAll(); });
  });

  function getCsrf() {
    const el = document.querySelector('input[name="__RequestVerificationToken"]');
    return el ? el.value : null;
  }
  async function postForm(url, data) {
    const token = getCsrf();
    const form = new URLSearchParams();
    Object.entries(data).forEach(([k,v]) => form.append(k, v));
    if (token) form.append('__RequestVerificationToken', token);

    const res = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: form.toString()
    });
    if (!res.ok) {
      const t = await res.text();
      throw new Error(t || 'Request failed');
    }
    return await res.json().catch(()=> ({}));
  }

  // ---------- Approve flow ----------
  let staffLoaded = false;
  async function loadStaffOptions() {
    if (staffLoaded) return;
    const sel = document.getElementById('apStaff');
    sel.innerHTML = '<option value="">Loading…</option>';
    const res = await fetch('/api/staff/options', { cache: 'no-store' });
    if (!res.ok) { sel.innerHTML = '<option value="">Failed to load</option>'; return; }
    const list = await res.json();
    sel.innerHTML = '<option value="">Select staff…</option>' +
      (list || []).map(o => `<option value="${o.id}">${o.name}</option>`).join('');
    staffLoaded = true;
  }
  document.getElementById('openApprove').addEventListener('click', loadStaffOptions);

  document.getElementById('approveForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const agentId = document.getElementById('agentId').value;
    const staffId = document.getElementById('apStaff').value;
    if (!staffId) { alert('Please select a staff to assign.'); return; }

    try {
      await postForm('/Merchant/Approve', { agentId: agentId, assignedStaffId: staffId });
      // UI feedback
      const st = document.getElementById('mpStatus');
      st.className = 'chip chip-paid';
      st.textContent = 'Approved';
      closeAll();
    } catch (err) {
      alert(err.message || 'Failed to approve.');
    }
  });

  // ---------- Decline flow ----------
  document.getElementById('declineForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const id = document.getElementById('declineId').value;
    const reason = document.getElementById('dcReason').value.trim();
    if (!reason) { alert('Please provide a decline reason.'); return; }

    try {
      await postForm('/Merchant/Decline', { 'Id': id, 'Reason': reason });
      const st = document.getElementById('mpStatus');
      st.className = 'chip chip-failed';
      st.textContent = 'Declined';
      closeAll();
    } catch (err) {
      alert(err.message || 'Failed to decline.');
    }
  });

  // ---------- Carousel dots (for the Razor-rendered slides) ----------
  (function(){
    const track = document.getElementById('mpcTrack');
    const dots  = document.getElementById('mpcDots');
    const prev  = document.getElementById('mpcPrev');
    const next  = document.getElementById('mpcNext');
    const slides = Array.from(track.children);
    if (!slides.length) { prev.style.display = next.style.display = 'none'; return; }
    let index = 0;

    function goTo(i){
      index = (i + slides.length) % slides.length;
      track.style.transform = `translateX(-${index*100}%)`;
      Array.from(dots.children).forEach((d, k)=> d.setAttribute('aria-selected', k===index ? 'true' : 'false'));
    }
    slides.forEach((_, i)=>{
      const dot = document.createElement('button');
      dot.className = 'mpc-dot'; dot.type = 'button';
      dot.setAttribute('role','tab'); dot.setAttribute('aria-label', `Go to image ${i+1}`);
      dot.addEventListener('click', e => { e.stopPropagation(); goTo(i); });
      dots.appendChild(dot);
    });
    goTo(0);
    next.addEventListener('click', e => { e.stopPropagation(); goTo(index+1); });
    prev.addEventListener('click', e => { e.stopPropagation(); goTo(index-1); });
  })();
</script>
}
